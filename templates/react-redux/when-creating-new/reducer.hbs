import { fromJS } from 'immutable';
import { {{constantActionName}}_REQUEST, {{constantActionName}}_SUCCESS, {{constantActionName}}_FAILURE } from './{{camelCaseContainerName}}Constants';

const initialState = fromJS({
  {{camelCaseName}}: undefined,
  is{{pascalCaseActionName}}InProgress: false,
  is{{pascalCaseActionName}}Failed: false
});

function {{camelCaseContainerName}}Reducer(state = initialState, action) {
  switch (action.type) {
    case {{constantActionName}}_REQUEST:
      return state.withMutations((map) => {
        map.set('is{{pascalCaseActionName}}InProgress', true)
        .set('is{{pascalCaseActionName}}Failed', false)
        .set('{{camelCaseName}}', undefined);
      });
    case {{constantActionName}}_SUCCESS:
      return state.withMutations((map) => {
        map.set('is{{pascalCaseActionName}}InProgress', false)
        .set('{{camelCaseName}}', fromJS(action.{{camelCaseName}}));
      });
    case {{constantActionName}}_FAILURE:
      return state.withMutations((map) => {
        map.set('is{{pascalCaseActionName}}InProgress', false)
        .set('is{{pascalCaseActionName}}Failed', true);
    });
    default:
      return state;
  }
}

export default {{camelCaseContainerName}}Reducer;