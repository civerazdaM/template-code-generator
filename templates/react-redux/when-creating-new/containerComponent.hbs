import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { {{camelCaseActionName}}Request } from './{{camelCaseContainerName}}Actions';
import { makeSelectIs{{pascalCaseActionName}}InProgress, makeSelectIs{{pascalCaseActionName}}Failed, makeSelect{{pascalCaseName}} } from './{{camelCaseContainerName}}Selectors';
import Spinner from "../../componentsCommon/Spinner";
import FailurePage from "../../componentsCommon/FailurePage";
import {{pascalCaseName}} from './components/{{pascalCaseName}}';

class {{pascalCaseContainerName}}Page extends Component {

  componentWillMount(){
    this.props.dispatch{{pascalCaseActionName}}Request();
  }

  render() {
    let { is{{pascalCaseActionName}}InProgress, is{{pascalCaseActionName}}Failed, {{camelCaseName}} } = this.props;
    let isLoading = !{{camelCaseName}};
    let isFailed = is{{pascalCaseActionName}}Failed;

    if(isFailed){
      return(<FailurePage />);
    }

    if(isLoading){
      return(<Spinner />);
    }

    return (<{{pascalCaseName}} {{camelCaseName}}={ {{camelCaseName}}.toJS() } />);
  }
}

{{pascalCaseContainerName}}Page.propTypes = {
  is{{pascalCaseActionName}}InProgress: PropTypes.bool.isRequired,
  is{{pascalCaseActionName}}Failed: PropTypes.bool.isRequired,
  {{camelCaseName}}: PropTypes.object,
  dispatch{{pascalCaseActionName}}Request: PropTypes.func.isRequired,
};

const mapStateToProps = createStructuredSelector({
  is{{pascalCaseActionName}}InProgress: makeSelectIs{{pascalCaseActionName}}InProgress(),
  is{{pascalCaseActionName}}Failed: makeSelectIs{{pascalCaseActionName}}Failed(),
  {{camelCaseName}}: makeSelect{{pascalCaseName}}(),
});

const mapDispatchToPropsObj = {
  dispatch{{pascalCaseActionName}}Request: {{camelCaseActionName}}Request,
};

export default connect(mapStateToProps, mapDispatchToPropsObj) ({{pascalCaseContainerName}}Page);
